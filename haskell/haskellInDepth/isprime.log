[1 of 1] Compiling Main             ( src/isprime/Main.hs, src/isprime/Main.o )

==================== Tidy Core ====================
Result size of Tidy Core
  = {terms: 169, types: 177, coercions: 39, joins: 1/3}

-- RHS size: {terms: 4, types: 2, coercions: 0, joins: 0/0}
lvl :: P Integer
lvl = $fReadInteger_$sreadNumber $fReadInteger2 minPrec readEither7

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule4 :: Addr#
$trModule4 = "main"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule3 :: TrName
$trModule3 = TrNameS $trModule4

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule2 :: Addr#
$trModule2 = "Main"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule1 :: TrName
$trModule1 = TrNameS $trModule2

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$trModule :: Module
$trModule = Module $trModule3 $trModule1

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl1 :: Integer
lvl1 = 0

-- RHS size: {terms: 2, types: 2, coercions: 0, joins: 0/0}
lvl2 :: Integer
lvl2 = errorWithoutStackTrace readEither5

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl3 :: Integer
lvl3 = 1

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl4 :: Integer
lvl4 = 2

-- RHS size: {terms: 2, types: 2, coercions: 0, joins: 0/0}
lvl5 :: Integer
lvl5 = errorWithoutStackTrace readEither2

-- RHS size: {terms: 130, types: 134, coercions: 30, joins: 1/3}
main1 :: State# RealWorld -> (# State# RealWorld, () #)
main1
  = \ (s :: State# RealWorld) ->
      case ((allocaBytesAligned
               $fStorableBool7 $fStorableBool7 (getArgs1 `cast` <Co:7>))
            `cast` <Co:3>)
             s
      of
      { (# ipv, ipv1 #) ->
      case ((allocaBytes getCPUTime4 (getCPUTime1 `cast` <Co:6>))
            `cast` <Co:2>)
             ipv
      of
      { (# ipv2, ipv3 #) ->
      case ((hPutStr'
               stdout
               (case readEither8
                       (run
                          lvl
                          (case ipv1 of {
                             [] -> badHead;
                             : x ds3 -> x
                           }))
                of {
                  [] -> case lvl2 of wild1 { };
                  : x ds ->
                    case ds of {
                      [] ->
                        let {
                          lim :: Integer
                          lim = minusInteger x lvl3 } in
                        joinrec {
                          go :: Integer -> String
                          go (x1 :: Integer)
                            = case gtInteger# x1 lim of {
                                __DEFAULT ->
                                  case eqInteger# x1 lvl1 of {
                                    __DEFAULT ->
                                      case neqInteger# (modInteger x x1) lvl1 of {
                                        __DEFAULT -> $fShowBool4;
                                        1# -> jump go (plusInteger x1 lvl3)
                                      };
                                    1# -> case divZeroError of wild4 { }
                                  };
                                1# -> $fShowBool2
                              }; } in
                        jump go lvl4;
                      : ipv4 ipv5 -> case lvl5 of wild2 { }
                    }
                })
               True)
            `cast` <Co:2>)
             ipv2
      of
      { (# ipv4, ipv5 #) ->
      case ((allocaBytes getCPUTime4 (getCPUTime1 `cast` <Co:6>))
            `cast` <Co:2>)
             ipv4
      of
      { (# ipv6, ipv7 #) ->
      case ((hPutStr'
               stdout
               (uprintfs
                  (++ timeIt1 timeItNamed2)
                  (reverse1
                     (: (timeItNamed1,
                         let {
                           w :: Double
                           w = case doubleFromInteger (minusInteger ipv7 ipv3) of wild
                               { __DEFAULT ->
                               D# (*## wild 1.0e-12##)
                               } } in
                         \ (w1 :: FieldFormat) (eta :: String) ->
                           case w1 of { FieldFormat ww1 ww2 ww3 ww4 ww5 ww6 ww7 ->
                           case ww7 of { C# ww9 ->
                           $w$sformatRealFloat w ww1 ww2 ww3 ww4 ww5 ww9 eta
                           }
                           })
                        [])
                     [])
                  [])
               False)
            `cast` <Co:2>)
             ipv6
      of
      { (# ipv8, ipv9 #) ->
      (# ipv8, ipv5 #)
      }
      }
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 3, joins: 0/0}
main :: IO ()
main = main1 `cast` <Co:3>

-- RHS size: {terms: 2, types: 1, coercions: 3, joins: 0/0}
main2 :: State# RealWorld -> (# State# RealWorld, () #)
main2 = runMainIO1 (main1 `cast` <Co:3>)

-- RHS size: {terms: 1, types: 0, coercions: 3, joins: 0/0}
main :: IO ()
main = main2 `cast` <Co:3>



Linking src/isprime/Main ...
