ROLLBACK;
BEGIN;

DROP TABLE IF EXISTS test_partitioned CASCADE;

CREATE TEMPORARY TABLE test_partitioned (
  id INT NOT NULL PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
  created TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  value VARCHAR NOT NULL DEFAULT '',
  x INT NOT NULL DEFAULT 1 CHECK (x > 0),
  x2 INT NOT NULL GENERATED ALWAYS AS (x * 2) STORED,
  UNIQUE(id, value)
)
PARTITION BY RANGE (id);
CREATE INDEX on test_partitioned (value);

CREATE TEMPORARY TABLE test_partitioned_rest PARTITION OF test_partitioned DEFAULT;
INSERT INTO test_partitioned (value)
  (SELECT format('value%s', x * x) FROM generate_series(0, 10000) AS t(x));

CREATE TEMPORARY TABLE test_partitioned_1 (
  LIKE test_partitioned
  INCLUDING GENERATED
  INCLUDING CONSTRAINTS
  INCLUDING DEFAULTS
);

\d test_partitioned_1
\prompt 'Original table' _
-- NOTE: cannot have IDENTITY on partitioned value
-- Uses the parent table's instead
-- ALTER TABLE test_partitioned_2_1 ALTER COLUMN id DROP IDENTITY;

-- ALTER TABLE test_partitioned_2_1 ALTER COLUMN x ADD GENERATED BY DEFAULT AS IDENTITY;

\set range 'id >= 1000 AND id < 2000'
INSERT INTO test_partitioned_1 (SELECT :columns FROM test_partitioned WHERE :range);
DELETE FROM test_partitioned_rest WHERE :range;

ALTER TABLE test_partitioned_1 ADD CONSTRAINT temp_check CHECK(:range);
ALTER TABLE test_partitioned_rest ADD CONSTRAINT temp_check2 CHECK(NOT (:range));
ALTER TABLE test_partitioned ATTACH PARTITION test_partitioned_1 FOR VALUES FROM (1000) to (2000);
ALTER TABLE test_partitioned_1 DROP CONSTRAINT temp_check;
ALTER TABLE test_partitioned_rest DROP CONSTRAINT temp_check2;

\d test_partitioned_1
\prompt 'Attached table' _

\prompt 'Sample:' x
select * FROM test_partitioned TABLESAMPLE BERNOULLI(1) ;
